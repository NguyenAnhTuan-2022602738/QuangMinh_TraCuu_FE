import React, { useState, useEffect } from 'react';
import { Link, useHistory, useLocation } from 'react-router-dom';
import * as XLSX from 'xlsx';
import './AdminPanel.css';
import AdminQR from './AdminQR';
import AdminUserManagement from './AdminUserManagement';
import CategoryManagement from './CategoryManagement';

const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';

const AdminPanel = () => {
    const [products, setProducts] = useState([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState('');
    const [showForm, setShowForm] = useState(false);
    const [editingProduct, setEditingProduct] = useState(null);
    const [searchTerm, setSearchTerm] = useState('');
    const [uploading, setUploading] = useState(false);
    const [sidebarOpen, setSidebarOpen] = useState(true);
    const history = useHistory();
    const location = useLocation();

    // Get active view from URL path
    const getActiveView = () => {
        const path = location.pathname;
        console.log('üìç Current path:', path);
        
        if (path.includes('/admin/products')) {
            console.log('‚úÖ Active view: products');
            return 'products';
        }
        if (path.includes('/admin/users')) {
            console.log('‚úÖ Active view: users');
            return 'users';
        }
        if (path.includes('/admin/qr')) {
            console.log('‚úÖ Active view: qr');
            return 'qr';
        }
        if (path.includes('/admin/categories')) {
            console.log('‚úÖ Active view: categories');
            return 'categories';
        }
        
        console.log('‚úÖ Active view: dashboard');
        return 'dashboard';
    };

    const activeView = getActiveView();

    const [formData, setFormData] = useState({
        code: '',
        name: '',
        parentCategory: '',
        subcategory: '',
        category: '', // Keep for backward compatibility
        unit: '',
        image: '',
        BBCL: '',
        BBPT: '',
        BL: '',
        BLVIP: '',
        HONDA247: ''
    });

    useEffect(() => {
        // Ki·ªÉm tra x√°c th·ª±c admin
        const isAdmin = localStorage.getItem('isAdmin');
        const token = localStorage.getItem('adminToken');
        
        if (!isAdmin || !token) {
            history.push('/admin-login');
            return;
        }

        fetchProducts();
    }, [history]);

    const fetchProducts = async () => {
        try {
            setLoading(true);
            const response = await fetch(`${API_URL}/products`);
            const data = await response.json();
            setProducts(data);
            setError('');
        } catch (err) {
            setError('L·ªói t·∫£i d·ªØ li·ªáu s·∫£n ph·∫©m');
        } finally {
            setLoading(false);
        }
    };

    const handleLogout = () => {
        localStorage.removeItem('isAdmin');
        localStorage.removeItem('adminToken');
        history.push('/');
    };

    const handleInputChange = (e) => {
        const { name, value } = e.target;
        setFormData(prev => ({
            ...prev,
            [name]: value
        }));
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        
        try {
            const token = localStorage.getItem('adminToken');
            const url = editingProduct 
                ? `${API_URL}/products/${editingProduct._id}`
                : `${API_URL}/products`;
            
            const method = editingProduct ? 'PUT' : 'POST';

            const response = await fetch(url, {
                method,
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${token}`
                },
                body: JSON.stringify(formData)
            });

            if (response.ok) {
                alert(editingProduct ? 'C·∫≠p nh·∫≠t th√†nh c√¥ng!' : 'Th√™m s·∫£n ph·∫©m th√†nh c√¥ng!');
                setShowForm(false);
                setEditingProduct(null);
                setFormData({
                    code: '', name: '', parentCategory: '', subcategory: '', category: '', unit: '', image: '',
                    BBCL: '', BBPT: '', BL: '', BLVIP: '', HONDA247: ''
                });
                fetchProducts();
            } else {
                const data = await response.json();
                alert(data.message || 'C√≥ l·ªói x·∫£y ra');
            }
        } catch (err) {
            alert('L·ªói k·∫øt n·ªëi server');
        }
    };

    const handleEdit = (product) => {
        setEditingProduct(product);
        setFormData({
            code: product.code || '',
            name: product.name || '',
            parentCategory: product.parentCategory || product.category || '',
            subcategory: product.subcategory || '',
            category: product.category || '',
            unit: product.unit || '',
            image: product.image || '',
            // L·∫•y gi√° t·ª´ product.prices n·∫øu c√≥, ng∆∞·ª£c l·∫°i l·∫•y t·ª´ product (c·∫•u tr√∫c c≈©)
            BBCL: (product.prices?.BBCL !== undefined) ? product.prices.BBCL : (product.BBCL || ''),
            BBPT: (product.prices?.BBPT !== undefined) ? product.prices.BBPT : (product.BBPT || ''),
            BL: (product.prices?.BL !== undefined) ? product.prices.BL : (product.BL || ''),
            BLVIP: (product.prices?.BLVIP !== undefined) ? product.prices.BLVIP : (product.BLVIP || ''),
            HONDA247: (product.prices?.honda247 !== undefined) ? product.prices.honda247 : (product.HONDA247 || '')
        });
        setShowForm(true);
    };

    const handleDelete = async (id) => {
        if (!window.confirm('B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a s·∫£n ph·∫©m n√†y?')) return;

        try {
            const token = localStorage.getItem('adminToken');
            console.log('üóëÔ∏è Deleting product:', id);
            console.log('üîë Token:', token ? 'Available' : 'Missing');
            
            const response = await fetch(`${API_URL}/products/${id}`, {
                method: 'DELETE',
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                }
            });

            console.log('üì° Delete response status:', response.status);
            
            if (response.ok) {
                const data = await response.json();
                console.log('‚úÖ Delete success:', data);
                alert('X√≥a th√†nh c√¥ng!');
                fetchProducts();
            } else {
                const errorData = await response.json().catch(() => ({}));
                console.error('‚ùå Delete failed:', response.status, errorData);
                alert(`C√≥ l·ªói x·∫£y ra: ${errorData.message || response.statusText}`);
            }
        } catch (err) {
            console.error('üí• Delete error:', err);
            alert(`L·ªói k·∫øt n·ªëi server: ${err.message}`);
        }
    };

    const handleExcelUpload = async (e) => {
        const file = e.target.files[0];
        if (!file) return;

        setUploading(true);

        try {
            const data = await file.arrayBuffer();
            const workbook = XLSX.read(data);
            const worksheet = workbook.Sheets[workbook.SheetNames[0]];
            const jsonData = XLSX.utils.sheet_to_json(worksheet);

            console.log('Excel data parsed:', jsonData.slice(0, 2));

            if (jsonData.length === 0) {
                alert('File Excel kh√¥ng c√≥ d·ªØ li·ªáu ho·∫∑c kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng. Vui l√≤ng ki·ªÉm tra l·∫°i.');
                setUploading(false);
                e.target.value = '';
                return;
            }

            // Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu Excel sang format ph√π h·ª£p
            const products = jsonData.map(row => {
                // Ki·ªÉm tra c√°c tr∆∞·ªùng b·∫Øt bu·ªôc
                if (!row['M√£ s·∫£n ph·∫©m'] && !row['code']) {
                    throw new Error('Thi·∫øu c·ªôt M√£ s·∫£n ph·∫©m/code trong file Excel');
                }
                if (!row['T√™n s·∫£n ph·∫©m'] && !row['name']) {
                    throw new Error('Thi·∫øu c·ªôt T√™n s·∫£n ph·∫©m/name trong file Excel');
                }

                const parentCategory = row['Danh m·ª•c cha'] || row['parentCategory'] || row['Danh m·ª•c'] || row['category'] || 'Ch∆∞a ph√¢n lo·∫°i';
                const subcategory = row['Danh m·ª•c con'] || row['subcategory'] || row['Danh m·ª•c'] || row['category'] || 'Ch∆∞a ph√¢n lo·∫°i';

                return {
                    code: row['M√£ s·∫£n ph·∫©m'] || row['code'] || '',
                    name: row['T√™n s·∫£n ph·∫©m'] || row['name'] || '',
                    parentCategory: parentCategory,
                    subcategory: subcategory,
                    category: row['Danh m·ª•c'] || row['category'] || parentCategory, // Backward compatibility
                    unit: row['ƒê∆°n v·ªã'] || row['unit'] || 'C√°i',
                    image: row['URL ·∫¢nh'] || row['image'] || null,
                    BBCL: parseFloat(row['BBCL']) || 0,
                    BBPT: parseFloat(row['BBPT']) || 0,
                    BL: parseFloat(row['BL']) || 0,
                    BLVIP: parseFloat(row['BLVIP']) || 0,
                    HONDA247: parseFloat(row['HONDA247']) || 0
                };
            });

            console.log('Processed products:', products.slice(0, 2));

            // G·ª≠i l√™n server
            const token = localStorage.getItem('adminToken');
            const response = await fetch(`${API_URL}/products/bulk`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${token}`
                },
                body: JSON.stringify({ products })
            });

            const result = await response.json();

            if (response.ok) {
                alert(`Import th√†nh c√¥ng ${result.count} s·∫£n ph·∫©m!`);
                fetchProducts();
            } else {
                alert(`L·ªói khi import: ${result.message || 'Kh√¥ng x√°c ƒë·ªãnh'}`);
                console.error('Import error:', result);
            }
        } catch (err) {
            console.error('Excel upload error:', err);
            alert('L·ªói x·ª≠ l√Ω file Excel: ' + err.message);
        } finally {
            setUploading(false);
            e.target.value = '';
        }
    };

    const downloadExcelTemplate = () => {
        const template = [
            {
                'M√£ s·∫£n ph·∫©m': 'SP001',
                'T√™n s·∫£n ph·∫©m': 'B·ªô l·ªçc d·∫ßu Honda City',
                'Danh m·ª•c cha': 'PH·ª§ T√ôNG ƒê·ªòNG C∆†',
                'Danh m·ª•c con': 'B·ªô l·ªçc d·∫ßu',
                'ƒê∆°n v·ªã': 'C√°i',
                'URL ·∫¢nh': 'https://example.com/image1.jpg',
                'BBCL': 100000,
                'BBPT': 95000,
                'BL': 110000,
                'BLVIP': 105000,
                'HONDA247': 98000
            },
            {
                'M√£ s·∫£n ph·∫©m': 'SP002',
                'T√™n s·∫£n ph·∫©m': 'M√° phanh tr∆∞·ªõc Honda Civic',
                'Danh m·ª•c cha': 'PH·ª§ T√ôNG PHANH',
                'Danh m·ª•c con': 'M√° phanh',
                'ƒê∆°n v·ªã': 'B·ªô',
                'URL ·∫¢nh': 'https://example.com/image2.jpg',
                'BBCL': 50000,
                'BBPT': 48000,
                'BL': 55000,
                'BLVIP': 52000,
                'HONDA247': 49000
            }
        ];

        // Th√™m tr∆∞·ªùng h∆∞·ªõng d·∫´n
        const ws = XLSX.utils.json_to_sheet(template);
        
        // Th√™m h∆∞·ªõng d·∫´n trong sheet
        XLSX.utils.sheet_add_aoa(ws, [
            ['H∆Ø·ªöNG D·∫™N IMPORT S·∫¢N PH·∫®M:'],
            ['1. Kh√¥ng thay ƒë·ªïi t√™n c√°c c·ªôt'],
            ['2. M√£ s·∫£n ph·∫©m l√† b·∫Øt bu·ªôc v√† ph·∫£i duy nh·∫•t'],
            ['3. T√™n s·∫£n ph·∫©m, Danh m·ª•c cha, Danh m·ª•c con l√† b·∫Øt bu·ªôc'],
            ['4. Danh m·ª•c cha: nh√≥m l·ªõn (VD: PH·ª§ T√ôNG ƒê·ªòNG C∆†, PH·ª§ T√ôNG PHANH)'],
            ['5. Danh m·ª•c con: nh√≥m nh·ªè trong danh m·ª•c cha (VD: B·ªô l·ªçc d·∫ßu, M√° phanh)'],
            ['6. URL ·∫¢nh: link ·∫£nh s·∫£n ph·∫©m (c√≥ th·ªÉ ƒë·ªÉ tr·ªëng)'],
            ['7. Gi√° c√≥ th·ªÉ ƒë·ªÉ tr·ªëng ho·∫∑c 0 n·∫øu kh√¥ng c√≥'],
            ['8. X√≥a c√°c d√≤ng m·∫´u tr∆∞·ªõc khi nh·∫≠p d·ªØ li·ªáu th·∫≠t'],
        ], { origin: 'A4' });

        const wb = XLSX.utils.book_new();
        XLSX.utils.book_append_sheet(wb, ws, 'S·∫£n ph·∫©m');
        XLSX.writeFile(wb, 'mau-import-san-pham.xlsx');
    };

    const filteredProducts = products.filter(p => 
        String(p.code).toLowerCase().includes(searchTerm.toLowerCase()) ||
        String(p.name).toLowerCase().includes(searchTerm.toLowerCase()) ||
        String(p.category).toLowerCase().includes(searchTerm.toLowerCase())
    );

    return (
        <div className="admin-panel-modern">
            {/* Sidebar */}
            <aside className={`admin-sidebar ${sidebarOpen ? 'open' : 'closed'}`}>
                <div className="sidebar-header">
                    <div className="sidebar-brand">
                        <div className="brand-icon">QM</div>
                        <div className="brand-text">
                            <h3>Quang Minh</h3>
                            <span>Admin Panel</span>
                        </div>
                    </div>
                    <button className="sidebar-toggle" onClick={() => setSidebarOpen(!sidebarOpen)}>
                        {sidebarOpen ? '‚óÄ' : '‚ñ∂'}
                    </button>
                </div>

                <nav className="sidebar-nav">
                    <button 
                        className={`nav-item ${activeView === 'dashboard' ? 'active' : ''}`}
                        onClick={() => history.push('/admin')}
                    >
                        <span className="nav-icon">üìä</span>
                        <span className="nav-label">T·ªïng quan</span>
                    </button>
                    
                    <button 
                        className={`nav-item ${activeView === 'products' ? 'active' : ''}`}
                        onClick={() => history.push('/admin/products')}
                    >
                        <span className="nav-icon">üì¶</span>
                        <span className="nav-label">S·∫£n ph·∫©m</span>
                    </button>

                    <button 
                        className={`nav-item ${activeView === 'users' ? 'active' : ''}`}
                        onClick={() => history.push('/admin/users')}
                    >
                        <span className="nav-icon">üë•</span>
                        <span className="nav-label">T√†i kho·∫£n</span>
                    </button>

                    <button 
                        className={`nav-item ${activeView === 'categories' ? 'active' : ''}`}
                        onClick={() => history.push('/admin/categories')}
                    >
                        <span className="nav-icon">üóÇÔ∏è</span>
                        <span className="nav-label">Danh m·ª•c</span>
                    </button>

                    <button 
                        className={`nav-item ${activeView === 'qr' ? 'active' : ''}`}
                        onClick={() => history.push('/admin/qr')}
                    >
                        <span className="nav-icon">üîó</span>
                        <span className="nav-label">T·∫°o QR Code</span>
                    </button>
                </nav>

                <div className="sidebar-footer">
                    <Link to="/" className="footer-link">
                        <span className="nav-icon">üè†</span>
                        <span className="nav-label">Trang ch·ªß</span>
                    </Link>
                    <button onClick={handleLogout} className="logout-btn">
                        <span className="nav-icon">üö™</span>
                        <span className="nav-label">ƒêƒÉng xu·∫•t</span>
                    </button>
                </div>
            </aside>

            {/* Main Content */}
            <main className="admin-main-content">
                {/* Top Bar */}
                <div className="admin-topbar">
                    <div className="topbar-left">
                        <h1 className="page-title">
                            {activeView === 'dashboard' && 'üìä T·ªïng quan'}
                            {activeView === 'products' && 'üì¶ Qu·∫£n l√Ω s·∫£n ph·∫©m'}
                            {activeView === 'users' && 'üë• Qu·∫£n l√Ω t√†i kho·∫£n'}
                            {activeView === 'qr' && 'üîó T·∫°o QR Code'}
                            {activeView === 'categories' && 'üóÇÔ∏è Qu·∫£n l√Ω danh m·ª•c'}
                        </h1>
                        <p className="page-subtitle">Ph·ª• t√πng xe m√°y Quang Minh</p>
                    </div>
                    <div className="topbar-right">
                        <div className="admin-user-info">
                            <div className="user-avatar">üë§</div>
                            <span>Admin</span>
                        </div>
                    </div>
                </div>

                {/* Content Area */}
                <div className="admin-content-area">
                    
                    {/* Dashboard View */}
                    {activeView === 'dashboard' && (
                        <div className="dashboard-grid">
                            <div className="stat-card">
                                <div className="stat-icon">üì¶</div>
                                <div className="stat-info">
                                    <h3>{products.length}</h3>
                                    <p>T·ªïng s·∫£n ph·∫©m</p>
                                </div>
                            </div>
                            <div className="stat-card">
                                <div className="stat-icon">üìä</div>
                                <div className="stat-info">
                                    <h3>{new Set(products.map(p => p.category)).size}</h3>
                                    <p>Danh m·ª•c</p>
                                </div>
                            </div>
                            <div className="stat-card">
                                <div className="stat-icon">üí∞</div>
                                <div className="stat-info">
                                    <h3>5</h3>
                                    <p>B·∫£ng gi√°</p>
                                </div>
                            </div>
                            <div className="stat-card">
                                <div className="stat-icon">üë•</div>
                                <div className="stat-info">
                                    <h3>Active</h3>
                                    <p>H·ªá th·ªëng</p>
                                </div>
                            </div>

                            <div className="quick-actions-card">
                                <h3>‚ö° Thao t√°c nhanh</h3>
                                <div className="quick-actions">
                                    <button onClick={() => history.push('/admin/products')} className="quick-action-btn">
                                        <span>üì¶</span> Xem s·∫£n ph·∫©m
                                    </button>
                                    <button onClick={() => { history.push('/admin/products'); setShowForm(true); setEditingProduct(null); setFormData({ code: '', name: '', parentCategory: '', subcategory: '', category: '', unit: '', BBCL: '', BBPT: '', BL: '', BLVIP: '', HONDA247: '' }); }} className="quick-action-btn">
                                        <span>‚ûï</span> Th√™m s·∫£n ph·∫©m
                                    </button>
                                    <button onClick={() => history.push('/admin/users')} className="quick-action-btn">
                                        <span>üë•</span> Qu·∫£n l√Ω t√†i kho·∫£n
                                    </button>
                                    <button onClick={() => history.push('/admin/qr')} className="quick-action-btn">
                                        <span>üîó</span> T·∫°o QR Code
                                    </button>
                                </div>
                            </div>
                        </div>
                    )}

                    {/* Products View */}
                    {activeView === 'products' && (
                        <div className="products-view">
                            <div className="view-toolbar">
                <div className="search-box-admin">
                    <input
                        type="text"
                        placeholder="üîç T√¨m ki·∫øm s·∫£n ph·∫©m..."
                        value={searchTerm}
                        onChange={(e) => setSearchTerm(e.target.value)}
                    />
                </div>
                
                <div className="toolbar-buttons">
                    <button 
                        onClick={() => {
                            setShowForm(true);
                            setEditingProduct(null);
                            setFormData({
                                code: '', name: '', parentCategory: '', subcategory: '', category: '', unit: '',
                                BBCL: '', BBPT: '', BL: '', BLVIP: '', HONDA247: ''
                            });
                        }}
                        className="btn btn-primary"
                    >
                        ‚ûï Th√™m s·∫£n ph·∫©m
                    </button>
                    
                    <button 
                        onClick={downloadExcelTemplate}
                        className="btn btn-outline"
                    >
                        üìÑ T·∫£i file m·∫´u
                    </button>
                    
                    <label className="btn btn-secondary file-upload-btn">
                        {uploading ? '‚è≥ ƒêang import...' : 'üì§ Import Excel'}
                        <input
                            type="file"
                            accept=".xlsx,.xls"
                            onChange={handleExcelUpload}
                            disabled={uploading}
                            style={{ display: 'none' }}
                        />
                    </label>
                </div>
                            </div>

                {showForm && (
                    <div className="product-form-modal">
                        <div className="modal-overlay" onClick={() => setShowForm(false)}></div>
                        <div className="modal-content">
                            <div className="modal-header">
                                <h2>{editingProduct ? '‚úèÔ∏è S·ª≠a s·∫£n ph·∫©m' : '‚ûï Th√™m s·∫£n ph·∫©m m·ªõi'}</h2>
                                <button onClick={() => setShowForm(false)} className="close-btn">‚úï</button>
                            </div>
                            
                            <form onSubmit={handleSubmit} className="product-form">
                                <div className="form-row">
                                    <div className="form-group">
                                        <label>M√£ s·∫£n ph·∫©m *</label>
                                        <input
                                            type="text"
                                            name="code"
                                            value={formData.code}
                                            onChange={handleInputChange}
                                            required
                                        />
                                    </div>
                                    
                                    <div className="form-group">
                                        <label>Danh m·ª•c cha *</label>
                                        <input
                                            type="text"
                                            name="parentCategory"
                                            value={formData.parentCategory}
                                            onChange={handleInputChange}
                                            placeholder="VD: PH·ª§ T√ôNG ƒê·ªòNG C∆†"
                                            required
                                        />
                                    </div>
                                </div>

                                <div className="form-row">
                                    <div className="form-group">
                                        <label>Danh m·ª•c con *</label>
                                        <input
                                            type="text"
                                            name="subcategory"
                                            value={formData.subcategory}
                                            onChange={handleInputChange}
                                            placeholder="VD: B·ªô l·ªçc d·∫ßu"
                                            required
                                        />
                                    </div>
                                    
                                    <div className="form-group">
                                        <label>ƒê∆°n v·ªã *</label>
                                        <input
                                            type="text"
                                            name="unit"
                                            value={formData.unit}
                                            onChange={handleInputChange}
                                            required
                                        />
                                    </div>
                                </div>

                                <div className="form-group">
                                    <label>T√™n s·∫£n ph·∫©m *</label>
                                    <input
                                        type="text"
                                        name="name"
                                        value={formData.name}
                                        onChange={handleInputChange}
                                        required
                                    />
                                </div>

                                <div className="form-group">
                                    <label>üñºÔ∏è URL ·∫¢nh s·∫£n ph·∫©m</label>
                                    <input
                                        type="url"
                                        name="image"
                                        value={formData.image}
                                        onChange={handleInputChange}
                                        placeholder="https://example.com/image.jpg"
                                    />
                                    {formData.image && (
                                        <div className="image-preview">
                                            <img src={formData.image} alt="Preview" onError={(e) => e.target.style.display = 'none'} />
                                        </div>
                                    )}
                                </div>

                                <div className="price-section">
                                    <h3>B·∫£ng gi√°</h3>
                                    <div className="form-row">
                                        <div className="form-group">
                                            <label>BBCL</label>
                                            <input
                                                type="number"
                                                name="BBCL"
                                                value={formData.BBCL}
                                                onChange={handleInputChange}
                                            />
                                        </div>
                                        
                                        <div className="form-group">
                                            <label>BBPT</label>
                                            <input
                                                type="number"
                                                name="BBPT"
                                                value={formData.BBPT}
                                                onChange={handleInputChange}
                                            />
                                        </div>
                                    </div>

                                    <div className="form-row">
                                        <div className="form-group">
                                            <label>BL</label>
                                            <input
                                                type="number"
                                                name="BL"
                                                value={formData.BL}
                                                onChange={handleInputChange}
                                            />
                                        </div>
                                        
                                        <div className="form-group">
                                            <label>BLVIP</label>
                                            <input
                                                type="number"
                                                name="BLVIP"
                                                value={formData.BLVIP}
                                                onChange={handleInputChange}
                                            />
                                        </div>
                                    </div>

                                    <div className="form-group">
                                        <label>HONDA247</label>
                                        <input
                                            type="number"
                                            name="HONDA247"
                                            value={formData.HONDA247}
                                            onChange={handleInputChange}
                                        />
                                    </div>
                                </div>

                                <div className="form-actions">
                                    <button type="button" onClick={() => setShowForm(false)} className="btn btn-outline">
                                        H·ªßy
                                    </button>
                                    <button type="submit" className="btn btn-primary">
                                        {editingProduct ? 'C·∫≠p nh·∫≠t' : 'Th√™m m·ªõi'}
                                    </button>
                                </div>
                            </form>
                        </div>
                    </div>
                )}

                {activeView === 'products' && loading && (
                    <div className="loading-state">
                        <div className="spinner"></div>
                        <p>ƒêang t·∫£i d·ªØ li·ªáu...</p>
                    </div>
                )}

                {activeView === 'products' && error && (
                    <div className="error-state">
                        <span>‚ö†Ô∏è</span>
                        <p>{error}</p>
                    </div>
                )}

                {activeView === 'products' && !loading && !error && (
                    <div className="products-table-container">
                        <div className="table-header">
                            <h3>Danh s√°ch s·∫£n ph·∫©m ({filteredProducts.length})</h3>
                        </div>
                        
                        <div className="table-responsive">
                            <table className="products-table">
                                <thead>
                                    <tr>
                                        <th>M√£ SP</th>
                                        <th>T√™n s·∫£n ph·∫©m</th>
                                        <th>Danh m·ª•c cha</th>
                                        <th>Danh m·ª•c con</th>
                                        <th>ƒê∆°n v·ªã</th>
                                        <th>BBCL</th>
                                        <th>BBPT</th>
                                        <th>BL</th>
                                        <th>BLVIP</th>
                                        <th>HONDA247</th>
                                        <th>Thao t√°c</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    {filteredProducts.map(product => (
                                        <tr key={product._id}>
                                            <td><code>{product.code}</code></td>
                                            <td className="product-name" title={product.name}>{product.name}</td>
                                            <td><span className="category-badge parent">{product.parentCategory || product.category}</span></td>
                                            <td><span className="category-badge sub">{product.subcategory || '-'}</span></td>
                                            <td>{product.unit}</td>
                                            <td className="price-cell">{(product.prices?.BBCL !== undefined ? product.prices.BBCL : product.BBCL)?.toLocaleString('vi-VN')}</td>
                                            <td className="price-cell">{(product.prices?.BBPT !== undefined ? product.prices.BBPT : product.BBPT)?.toLocaleString('vi-VN')}</td>
                                            <td className="price-cell">{(product.prices?.BL !== undefined ? product.prices.BL : product.BL)?.toLocaleString('vi-VN')}</td>
                                            <td className="price-cell">{(product.prices?.BLVIP !== undefined ? product.prices.BLVIP : product.BLVIP)?.toLocaleString('vi-VN')}</td>
                                            <td className="price-cell">{(product.prices?.honda247 !== undefined ? product.prices.honda247 : product.HONDA247)?.toLocaleString('vi-VN')}</td>
                                            <td className="action-cell">
                                                <button 
                                                    onClick={() => handleEdit(product)}
                                                    className="btn-action btn-edit"
                                                    title="S·ª≠a"
                                                >
                                                    ‚úèÔ∏è
                                                </button>
                                                <button 
                                                    onClick={() => handleDelete(product._id)}
                                                    className="btn-action btn-delete"
                                                    title="X√≥a"
                                                >
                                                    üóëÔ∏è
                                                </button>
                                            </td>
                                        </tr>
                                    ))}
                                </tbody>
                            </table>
                        </div>

                        {filteredProducts.length === 0 && (
                            <div className="empty-state">
                                <p>üì¶ Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m n√†o</p>
                            </div>
                        )}
                    </div>
                )}
                    </div>
                )}

                {/* QR Code View */}
                {activeView === 'qr' && (
                    <div className="admin-qr-container">
                        {console.log('üîó Rendering AdminQR component')}
                        <AdminQR onBack={() => history.push('/admin')} />
                    </div>
                )}

                {/* User Management View */}
                {activeView === 'users' && (
                    <div className="admin-usermgmt-container">
                        {console.log('üë• Rendering AdminUserManagement component')}
                        <AdminUserManagement onBack={() => history.push('/admin')} />
                    </div>
                )}

                {/* Category Management View */}
                {activeView === 'categories' && (
                    <div className="admin-category-container">
                        {console.log('üóÇÔ∏è Rendering CategoryManagement component')}
                        <CategoryManagement />
                    </div>
                )}

                </div>
            </main>
        </div>
    );
};

export default AdminPanel;
